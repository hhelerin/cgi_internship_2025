package com.example.cgi_internship_2025.data;

import com.example.cgi_internship_2025.model.Flight;
import com.example.cgi_internship_2025.model.FlightSchedule;
import com.example.cgi_internship_2025.repository.FlightRepository;
import com.example.cgi_internship_2025.repository.FlightScheduleRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;


@Component
public class FlightGenerator{

    @Autowired
    private FlightRepository flightRepository;
    @Autowired
    private FlightScheduleRepository flightScheduleRepository;


    //Method generated by OpenAIâ€™s GPT-4 model
    public void generateFutureFlights(LocalDate start, LocalDate end) {
        List<FlightSchedule> schedules = flightScheduleRepository.findAll();

        for (FlightSchedule schedule : schedules) {
            schedule = flightScheduleRepository.findWithAircraftAndSeats(schedule.getId());

            LocalDate date = start;
            while (!date.isAfter(end)) {
                if (matchesSchedule(schedule, date)) {
                    // Generate the original flight
                    Flight flight = new Flight(null, date, 0, 0, new ArrayList<>(), schedule, null);
                    flight.setAmountOfSeats(schedule.getAircraftType().getSeatMappings().size());
                    flight.setAvailableSeats(flight.getAmountOfSeats());
                    flightRepository.save(flight);

                    // Generate the return flight (2 hours after the original)
                    LocalDateTime returnDateTime = LocalDateTime.of(date, schedule.getDepartureTime()).plusHours(2);
                    Flight returnFlight = new Flight(null, returnDateTime.toLocalDate(), 0, 0, new ArrayList<>(), schedule, null);
                    returnFlight.setAmountOfSeats(schedule.getAircraftType().getSeatMappings().size());
                    returnFlight.setAvailableSeats(returnFlight.getAmountOfSeats());
                    flightRepository.save(returnFlight);
                }
                date = date.plusDays(1);
            }
        }
    }

    private boolean matchesSchedule(FlightSchedule schedule, LocalDate date) {
    int weekday = date.getDayOfWeek().getValue();  // 1 = Monday, 7 = Sunday
    String scheduleWeekdays = schedule.getWeekday();  // "12345--" or "1-3-5--"

    // Check if the character at the weekday position is not a dash
    return scheduleWeekdays.charAt(weekday - 1) != '-';
}
}


